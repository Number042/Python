import matplotlib.pyplot as plt

# fuction to calculate S with IP in the center
#
def rel_s( df, row ):
    """
    Shift the IP in the center of S. (KEK convention SAD, LER?)
    """
    if row['S'] > df.S.max()/2:
        rel_s = row['S'] - df.S.max()  
    else:
        rel_s = row['S']
    
    return rel_s

# # old convention
#     def rel_s( self, df, row ):
#         """
#         Shift the IP in the center of S.
#         """
#         if row['S'] < df.S.max()/2:
#             rel_s = -row['S']
#         elif row['S'] > df.S.max()/2:
#             rel_s = df.S.max() - row['S']
        
#         return rel_s

def calcAper(s):
    r = 0.040
    if((-3.640000000 <= s) & (s < -2.725000000)): r = .040000000
    if((-2.725000000 <= s) & (s < -2.675000000)): r = (-0.100000) * s + (-.232500000)
    if((-2.675000000 <= s) & (s < -1.750000000)): r = .035000000
    if((-1.750000000 <= s) & (s < -1.630000000)): r = (-0.100000) * s + (-.140000000)
    if((-1.630000000 <= s) & (s < -1.590000000)): r = (-0.025000) * s + (-.017750000)
    if((-1.590000000 <= s) & (s < -1.252000000)): r = .022000000
    if((-1.252000000 <= s) & (s < -1.172000000)): r = (-0.100000) * s + (-.103200000)
    if((-1.172000000 <= s) & (s < -1.092000000)): r = (-0.006250) * s + (.006675000)
    if((-1.092000000 <= s) & (s <  -.620500000)): r = .013500000
    if(( -.620500000 <= s) & (s <  -.452000000)): r = (-0.020772) * s + (0.000611276)
    if(( -.452000000 <= s) & (s <  -.220000000)): r = (-0.021552) * s + (0.000258621)
    if(( -.220000000 <= s) & (s <  -.203340000)): r = (-0.002401) * s + (.004471789)
    if(( -.203340000 <= s) & (s <  -.112170000)): r = (0.003071) * s + (.005584495)
    if(( -.112170000 <= s) & (s <   .094990000)): r = (0.004007) * s + (.005689416)

    if(( .094990000 <= s) & (s <  .245000000)):   r = (0.026198) * s + (.003581428)
    if(( .245000000 <= s) & (s <  .620500000)):   r = (0.009321) * s + (.007716378)
    if(( .620500000 <= s) & (s < 1.092000000)):   r = .013500000
    if((1.092000000 <= s) & (s < 1.172000000)):   r = (0.006250) * s + (.006675000)
    if((1.172000000 <= s) & (s < 1.252000000)):   r = (0.100000) * s + (-.103200000)
    if((1.252000000 <= s) & (s < 1.590000000)):   r = .022000000
    if((1.590000000 <= s) & (s < 1.630000000)):   r = (0.025000) * s + (-.017750000)
    if((1.630000000 <= s) & (s < 1.750000000)):   r = (0.100000) * s + (-.140000000)
    if((1.750000000 <= s) & (s < 2.350000000)):   r = .035000000
    if((2.350000000 <= s) & (s < 2.400000000)):   r = (0.100000) * s + (-.200000000)
    if((2.400000000 <= s) & (s < 3.315000000)):   r = .040000000
    
    return r

# easier way to setup a subplot arrangement
#
def sbplSetUp(count, dim = [15,10]):
    plt.figure( figsize = (dim[0], dim[1]) )
    axs = []
    for i in range(count):
        ax = plt.subplot(321+i) 
        axs.append(ax)
    
    return axs